OcteonTX2 RAS implementation
============================

OcteonTX2 implements the ARMv8 RAS (Reliability, Availability & Serviceability)
specification.

This decouples the tracking of hardware exception events from any outage to
the data being transferred, allowing a RAS-aware OS (such as Linux 4.18 onward)
to handle the outage as it sees fit, by analysing the context in which the data
is being used.

Errors in memory/cache transactions are detected by the hardware and handled
by the firmware.  These can be correctable or uncorrectable.
Correctable errors are benign and result in a system notification.  However,
uncorrectable errors compromise the integrity of the system; after recording
the error data and sending a notification, the firmware will reset the system
to prevent further damage.  The recorded error data are made available to
Linux upon a subsequent boot (via the Boot Error Record Table - BERT).

The firmware enables exceptions in relevant OcteonTX2 hardware units
(MDC, MCC, LMC) and performs the following actions:

- reports errors to serial console
- logs errors to a standard error-logging framework which is understood by
  RAS-aware OS software

The error-logging framework consists of:
  Generic Hardware Error Source (GHES)
  Hardware Error Source Table (HEST)
  Boot Error Record Table (BERT)

  Please refer to the ACPI specification for details of these.

While the access procedure for GHES is well defined in a UEFI/ACPI platform,
many OcteonTX2 embedded deployments will use ATF & DeviceTree rather than ACPI,
so a custom platform device in linux is provided to derive the GHES location
from device tree, and register the HEST, so the error indications flow to the
standard processing of a kernel built with **MEMORY_FAILURE=y** option, which is
notified in the standard fashion with an SDEI, and acts to contain uncorrectable
errors, retire troublesome pages, and abort/restart impacted subsystems.

The full RAS model is not available in kernels before 4.18, so in this case the
error indications are passed to the processing of the legacy EDAC model.

For details of the Device Tree "sdei-ghes" node describing this shared-memory
communication area, see the following kernel document:
  Documentation/devicetree/bindings/edac/marvell-sdei-ghes.txt

To assist in verifying this reporting path, and any customer-developed code
which continues the processing from the details provided by standard RAS & EDAC
kernel interfaces, a set of SMC services is defined between kernels and ATF to
force error injection via the LMC/MCC/MDC memory/cache interfaces, to model the
response to a genuine outage.
The API details of this OCTEONTX_EDAC SMC are outlined in ATF's
  include/plat/marvell/octeontx/otx2/plat_ras.h

The ability to inject multi-bit errors compromises system integrity, so is
disabled in the regular DEBUG=0 ATF builds.
